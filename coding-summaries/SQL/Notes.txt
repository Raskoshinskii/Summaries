* Блок_1
- Необходимо помнить порядок компилирования SQL запроса. Это помогает избегать ошибок
- Можно создавать так называемое "вычисляемое поле/столбец". Указывается в SELECT
- Не забывать про вложенный IF, но и не увлекаться им
- WHERE фильтрует строки, а HAVING группы
- Приоритет логических операторов: BETWEEN/IN, NOT, AND, OR
- LIKE сравнивает строки по некоторому шаблону (есть буква А, начинается с А...)
- Уникальные значения столбца можно отобрать, используя GROUP BY или DISTINCT
- В качестве аргументов агрегирующих функций могут выступать арифметические выражения
- Агрегирующие функции без использования GROUP BY применяются ко всему столбцу целиком
- Вложенные запросы:
  - Использование в части WHERE или HAVING: лог_операторы_сравнения [ANY | ALL], [NOT] IN
  - SELECT (e.g. SELECT a, b, (sub_query)...)
  - Если возвращает одно значение, то использовать как операнд (т.е. к нему что-то прибавить или отнять)
  - Если возвращает несколько значений, то использовать с операторами ANY, ALL
  - В FROM: ..FROM (sub_query) sub_query_alias
  - В JOIN: FROM table_1 JOIN (sub_query) sub_query_name

- Добавлять записи в таблицу можно, используя результаты запроса:
  - INSERT INTO table_name (columns) SELECT...
- При обновлении таблицы можно использовать несколько других таблиц. Тогда все используемые таблицы перечисляются в UPDATE
- Создать таблицу можно иcпользуя запрос (e.g. CREATE TABLE temp AS query)
- В GROUP BY всегда перечисляются НЕАГРЕГИРОВАННЫЕ столбцы/атрибуты
* Блок_2
- Связь один ко многим: Записям одной таблицы (главной) соответствует несколько записей другой таблицы (побочной)
- Для реализации связи многие ко многим обычно создают новую "таблицу связку", соответствующих по имени и типу ключевым столбцам исходных таблиц
- Каждый внешний ключ должен иметь такой же тип данных, как связанное поле главной таблицы
- ON DELETE позволяет установить действия для записей связанной таблицы при удалении записей главной таблицы:
  - CASCADE: записи удаляются
  - SET NULL: записи связанной таблицы зануляются (столбец связанной таблицы не должен иметь ограничение NOT NULL)
  - SET DEFAULT: в любое заданное значение
  - RESTRICT: удаление таких записей будет невозможно (ограничено)
- JOINS:
  - INNER JOIN: порядок соединения таблиц неважен, симметричный оператор
  - LEFT JOIN/RIGHT JOIN: порядок соединения таблиц важен, несимметричный оператор
  - CROSS JOIN: симметричынй, все возможные сочетания; FROM table_1 CROSS JOIN table_2 аналогично FROM table_1, table_2
  - ON: позволяет задавать условие соединения не только по одноименным полям
  - USING: если PK и FK имеют одинаковое название, то вместо ON можно использовать USING
  - Таблицы необязательно присоединять последовательно. Если есть общие столбцы, но таблицы не связаны FK,
    то их можно присоеденить используя ON (общие столбцы)
- В UPDATE можно присоединять таблицы (JOIN) и обновлять значения не только в текущей, но и  в присоединенных
- В подзапросе нельзя ссылаться на ту же таблицу которую удаляешь
- UNION: Объединение запросов
  - UNION ALL: работает быстрее, так как не устраняет дубликаты
  - UNION: устраняет дубликает (т.е. использует DISTINCT)
  - ORDER BY спользуется один раз в конце, а остальные операторы могут использоваться в обоих запросах
